@RestController
@RequestMapping("/api")
public class UserController {

    @Autowired
    private UserService userService;

    @GetMapping("/users/{id}")
    public ResponseEntity<User> getUserById(@PathVariable Long id) {
        User user = userService.getUserById(id);
        return ResponseEntity.ok(user);
    }

    @PostMapping("/users")
    public ResponseEntity<User> createUser(@RequestBody User user) {
        User newUser = userService.createUser(user);
        return ResponseEntity.status(HttpStatus.CREATED).body(newUser);
    }
}


==========================================================================
public interface UserService {
    User getUserById(Long id);
    User createUser(User user);
}

@Service
public class UserServiceImpl implements UserService {

    @Override
    public User getUserById(Long id) {
        // Implementation to get user by id
    }

    @Override
    public User createUser(User user) {
        // Implementation to create a new user
    }
}

=======================================================================

@RunWith(MockitoJUnitRunner.class)
public class UserControllerTest {

    @InjectMocks
    private UserController userController;

    @Mock
    private UserService userService;

    @Test
    public void testGetUserById() {
        Long userId = 1L;
        User user = new User(userId, "John");

        Mockito.when(userService.getUserById(userId)).thenReturn(user);

        ResponseEntity<User> responseEntity = userController.getUserById(userId);

        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertEquals(user, responseEntity.getBody());
    }

    @Test
    public void testCreateUser() {
        User user = new User(1L, "John");

        Mockito.when(userService.createUser(Mockito.any(User.class))).thenReturn(user);

        ResponseEntity<User> responseEntity = userController.createUser(user);

        assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());
        assertEquals(user, responseEntity.getBody());
    }
}

