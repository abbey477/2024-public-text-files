@Service
public class FileService {
    
    private static final String FILE_PATH = "data/sample.txt";
    
    // Write to file in resources directory
    public void writeToFile(String content) throws IOException {
        // Get the resources directory path
        Path resourceDirectory = Paths.get("src", "main", "resources");
        Path filePath = resourceDirectory.resolve(FILE_PATH);
        
        // Create directories if they don't exist
        Files.createDirectories(filePath.getParent());
        
        // Write content to file
        Files.write(filePath, content.getBytes(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
    }
    
    // Read from file in resources directory using Resource
    public String readFromFile() throws IOException {
        // Use ClassPathResource to read file from resources
        Resource resource = new ClassPathResource(FILE_PATH);
        
        try (InputStream inputStream = resource.getInputStream();
             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {
            
            return reader.lines().collect(Collectors.joining("\n"));
        }
    }
    
    // Alternative method to read using Files API
    public String readUsingFiles() throws IOException {
        Path resourceDirectory = Paths.get("src", "main", "resources");
        Path filePath = resourceDirectory.resolve(FILE_PATH);
        
        return Files.readString(filePath);
    }
}

@RestController
@RequestMapping("/api/file")
public class FileController {
    
    @Autowired
    private FileService fileService;
    
    @PostMapping("/write")
    public ResponseEntity<String> writeFile(@RequestBody String content) {
        try {
            fileService.writeToFile(content);
            return ResponseEntity.ok("File written successfully");
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error writing file: " + e.getMessage());
        }
    }
    
    @GetMapping("/read")
    public ResponseEntity<String> readFile() {
        try {
            String content = fileService.readFromFile();
            return ResponseEntity.ok(content);
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error reading file: " + e.getMessage());
        }
    }
}

// Required imports
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.*;
import java.io.*;
import java.nio.file.*;
import java.util.stream.Collectors;
